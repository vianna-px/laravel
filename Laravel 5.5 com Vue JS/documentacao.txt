[CRIANDO O PROJETO]

Iniciando projeto de aprendizado de Laravel 5.5 em conjunto com Vue JS.
Primeiramente, crio meu projeto Laravel na versão 5.5, o qual eu chamo de "Blog", com a seguinte linha de código:
> composer create-project --prefer-dist laravel/laravel blog "5.5.*"

Sequencialmente, abro o meu diretório C:\xampp\htdocs\laravel\Laravel 5.5 com Vue JS\blog e executo o comando:
> php artisan serve

##########################################################################################
[PREPARANDO O PROJETO]

para testar, abro meu navegador e digito http://localhost:8000/ , neste ponto, o correto é aparecer a tela inicial do Laravel. Tudo funcionando, então, vou ao arquivo .env e deixo o seguinte bloco da seguinte forma:
DB_CONNECTION=sqlite
DB_HOST=127.0.0.1
DB_PORT=3306
#DB_DATABASE=homestead
#DB_USERNAME=homestead
#DB_PASSWORD=secret

Logo após, crio o arquivo /blog/database/database.sqlite. Após isso, vou ao meu CMD na pasta /blog e digito a seguinte linha de comando:
> php artisan make:auth

Feito isso, agora eu vou novamente em http://localhost:8000/, irão aparecer os botões "Login" e "Register" no canto superior direito da tela inicial do Laravel. Agora irei criar as minhas tabelas do banco de dados, para que o cadastro e armazenamento funcionem de forma correta, portanto, digito no CMD o comando:
> php artisan migrate

Em seguida, paro a minha execução do servidor (abrindo o CMD e digitando Ctrl+C) e inicio de novo com o comando php artisan serve. E então, meu login e registro estão funcionando corretamente!

##########################################################################################
[TESTANDO VUE E COMPONENTES]

Agora, irei testar meus componentes Vue JS, com um componente que já vem pronto, no diretório resources/assets/js/components/ExampleComponent.vue. Para isso, vou em resources/views/home.blade.php, apago tudo entre as tags @section e @endsection e sobrescrevo com o nome do meu componente, que eu posso ver em resources/assets/js/app.js (lá eu marquei onde está o nome do meu componente, mas vou copiar e colar aqui também para facilitar)

//este é o nome do meu componente que já veio pronto
//                    ||
//                    \/
Vue.component('example-component', require('./components/ExampleComponent.vue'));
//                                                    /\
//                                                    ||
//                                   esta é minha importação do arquivo

e então eu renderizo esse componente na minha home.blade.php como uma Tag HTML:
<example-component></example-component>

para visualizar como ficou, basta ir em http://localhost:8000/home

##########################################################################################
[ALTERANDO E RENDERIZANDO COMPONENTES]

Para que eu consiga efetuar alterações nos meus componentes, precisarei ter o Node rodando na minha aplicação. Pra isso, instalo com o seguinte comando no CMD dentro do meu diretório da aplicação:
> npm install

E para atualizar alguma alteração que eu fiz de teste no meu componente, eu rodo:
> npm run dev

Explicação do próximo passo: toda vez que eu fizer alguma nova alteração no meu componente, precisarei rodar o "npm run dev", caso contrário não conseguirei visualizar minhas novidades do componente, o que é algo que me tomará muito tempo, coisa que não me é nada interessante. Para não precisar realizar esse procedimento, rodo o seguinte comando no CMD para atualizar automaticamente:
> npm run watch

##########################################################################################
[CRIANDO E ADAPTANDO COMPONENTES]

Feito isso, agora inicio minhas criações de componentes. Primeiramente, no diretório resources/assets/js/components eu crio o arquivo Topo.vue me baseando no ExampleComponent.vue, em seguida visualizo o html que está em /resources/views/layouts/app.blade.php para me basear. Copio tudo que está na tag <nav> e colo dentro das tags <template> no arquivo Topo.vue, adiciono a seção "ADICIONANDO PROPS AO COMPONENTE" dentro da minha tag <script> e realizo mais algumas alterações, como tirar tudo da tag @guest e alterar o método de entrada do link de título (vide Topo.vue para ver alterações). Vou ao arquivo /resources/assets/js/app.js e defino mina rota para meu novo componente.

Agora, para adaptar para uso o meu componente, eu vou em /resources/views/layouts/app.blade.php, dentro das tags body>div, e coloco as seguintes tag <topo></topo> (que foi como eu identifiquei o meu componente em /resources/assets/js/app.js) passando junto o que eu coloquei dentro do meu "props" (que foi título e url) no arquivo Topo.vue. Aí eu copio todo o conteúdo de @guest e apago tudo que tenho no meu <nav> dentro desse arquivo, pra testar meu novo componente. Pra isso, salvo e vou em http://localhost:8000/home. Pra saber que está funcionando, precisa aparecer a mesma tela de antes (só que sem os links no canto superior direito), acontecendo isso, tudo certo até aqui! 

Aí então eu colo, ainda no app.blade.php, tudo que eu tinha dentro da minha tag @guest e adapto no Topo.vue pra que isso seja exibido da mesma forma que antes, dentro da tag "<ul></ul>" com o comentário "<!-- Right Side Of Navbar -->" , insiro as tags "<slot></slot>". Pra testar, novamente, vou em http://localhost:8000/home, e agora precisa aparecer o botão de logout no canto superior direito da tela.

##########################################################################################
[PERSONALIZANDO BLOG]

Agora, irei alterar meu container da página inicial. Para isso, irei ao meu arquivo ExampleComponent.vue, copio tudo dentro da tag <template> e colo dentro da @section em home.blade.php. Crio o componente Painel.vue e me baseio em ExampleComponent.vue e o adapto (Cabeçalho, corpo do painel e props no script), ao fim disso, habilito o uso do componente no app.js, vou ao home.blade.php, apago meu painel antigo e insiro meu novo painel dinâmico com as tags <painel></painel>, passando junto o "título", que declarei a requisição lá no props do componente Painel.vue.

##########################################################################################
[CSS NO PAINEL]

Primeiramente, adiciono o props 'cor' ao meu Painel.vue e torno minha classe dinâmica, transformando ela numa variável, com o v-bind dentro da minha div no Painel.vue. E então crio uma função computada no meu script, com o argumento "computed", que irá setar a cor do meu painel de acordo com as condições que eu definir. Crio a tag <style media="screen"> e insiro minha estilização lá.

OBS: Estou copiando a estilização inspecionando os elementos da minha página /home, pois criei menus e submenus lá com o bootstrap, com as estilizações de panel-success, panel-danger e panel-warning, criando novas cores e inserindo dentro da classe .blue.

E então, vou em home.blade.php e altero minha classe do painel para "blue". Agora, refaço o mesmo procedimento, duplicando minha estilização criada, para gerar uma cor laranja e aplicá-la no meu segundo subpainel, dentro do meu painel principal.

##########################################################################################
[INICIANDO O COMPONENTE CAIXA]

Agora, que já testei um pouco do CSS com Bootstrap, irei tirar esses painéis e criar um painel do zero, para utilizar como uma caixa de conteúdos, utilizando o Admin LTE. Pra isso, irei criar um novo componente em /resources/assets/js/components, o qual eu chamarei de Caixa.vue, novamente, me baseando no ExampleComponent.vue, copiando todo seu conteúdo, colando no meu novo arquivo e apagando todo o conteúdo da tag <template>. Em seguida, habilito seu uso em app.js, aí então eu adiciono minha tag <caixa> na minha página /home. 

Feito isso, vou à página https://adminlte.io/themes/AdminLTE/pages/widgets.html e inspeciono os elementos da caixa de conteúdo que eu irei usar, clico com o botão direito, clico para editar como HTMl, seleciono toda a sua div, copio e colo na tag <template> em Caixa.vue. Copio também, a estilização do elemento selecionado, na mesma página que peguei o meu template, procurando classe por classe, dentre as que foram utilizadas no template que eu copiei.

Pra renderizar o ícone, fui ao Google e coloquei Fonte Awesome CDN e encontrei o link https://www.bootstrapcdn.com/fontawesome/, à partir dele, peguei o seguinte link de importação CDN:
https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css

Fui no arquivo /resources/assets/sass/app.scss e fiz uma nova importação de fonte, com a função: 
@import url("https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css");

e então, meu ícone já está renderizado! Repito o mesmo processo com o ícone à direita (ícone verde), porém através do Ionicons, pelo seguinte link CDN: 
http://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css

Após isso, altero o ícone antigo com a linha do meu novo ícone obtido, o qual marquei com a tag "ÍCONE ALTERADO" no arquivo Caixa.vue. Em seguida, pego mais algumas classes do footer da minha estilização da caixa de conteúdo e as insiro na minha tag <style> em Caixa.vue. 

##########################################################################################
[FINALIZANDO O COMPONENTE CAIXA]

Agora, de forma manual, irei definir uma cor para o meu texto da minha caixa de conteúdo, dentro do arquivo Caixa.vue, na tag <style>, no atributo "color", na classe .small-box. Feito isso, irei adicionar o meu efeito de transição quando eu passar o mouse em cima da caixa. Pra isso, inspeciono o elemento na página do AdminLTE, seleciono a div principal (a que tem a classe "small-box bg-aqua"), vou no canto superior direito do console de inspeção, na área de "Styles" vai ter o botão :hov, que é a estilização do hover. Clico nele, seleciono a caixa "hover" e copio aquela folha de estilo. Depois disso, clico na div de ícone, ainda com o :hov selecionado, e copio a estilização do ícone em hover. 
Agora eu repito esse processo para pegar a estilização do link da caixa de conteúdo em hover.

Agora irei adicionar um props em Caixa.vue. Dentro dele irei inserir quantidade, titulo, url, cor e ícone, e então adapto o Caixa.vue para tornar dinâmica a minha caixa de conteúdo, deixando dinâmica também a estilização da cor da minha caixa com o "v-bind" na classe e o "computed" no script. Além disso, adicionarei o v-bind também ao meu ícone, para torná-lo dinâmico também.

Agora, vou para o meu home.blade.php e passo, dentro da minha tag <caixa>, os parâmetros "qtd, titulo, url, cor e icone". Agora eu visualizo como ficou minha estilização em https://localhost:8000/home. Tudo funcionando, agora tornarei minha caixa mais dinâmica ainda, duplicando ela, 

##########################################################################################
[COMPONENTE PÁGINA]

Agora, criarei um componente página dinâmico, que irá adequar o tamanho de acordo com o valor passado, o qual irá variar entre col-md-2 e col-md-12, na tag <div> da minha página home.blade.php.

EXPLICANDO A LÓGICA QUE USAREI:
O único jeito que tenho pra explicar isso é matematicamente. Resumindo: a medida que eu escolher para CM, eu subtraio de 12 (que é o valor máximo para CM) e divido por 2. O resultado é o valor de CMO.
OBS: o valor de CM não pode ser ímpar. Caso seja, eu somo 1, para que o torne par.
Segue a fórmula:

##########################
##        FÓRMULA       ## 
##########################
##                      ##
## CM  = col-md         ##
## CMO = col-md-offset  ##
## (12 - CM) / 2 = CMO  ##
##                      ##
##########################

Enfim, irei criar meu componente chamado Pagina.vue, baseado, novamente, em ExampleComponent.vue, apagando tudo dentro de <template> e do export default no <script>. Em seguida, copio tudo da @section de home.blade.php e colo dentro do <template> na Pagina.vue, deixando um espaço de <slot> para inserção do home na tag <painel>. Aí então adiciono props no script, crio a função computada defineTamanho e insiro-a à classe da <div> que abriga o <slot>, adicionando também o v-bind. Sequencialmente, habilito meu novo componente em app.js, copio minha tag <painel> em home.blade.php, apago tudo que tem dentro da @section, aplico a minha nova tag <pagina> e, dentro dela, colo tudo que eu tinha na minha tag <painel>.

Feito isso, agora irei criar uma função para fazer a leitura do tamanho desejado, inserido na tag <pagina>, fazer o cálculo do tamanho exato do meu CMO e aplicá-lo, para que meu painel fique perfeitamente centralizado.

##########################################################################################
[RESOURCE CONTROLLERS PARA ARTIGOS]

Agora, irei arquitetar os links nas minhas caixas do painel. Para isso, primeiramente adiciono o v-bind ao href da caixa no arquivo Caixa.vue e altero seu conteúdo para "url", assim então eu torno minha URL dinâmica, a qual irá ser preenchida com o valor que eu passsar na página home.blade.php, dentro do atributo url="" na tag <caixa>. Feito isso, meus links dos cards já estão funcionando.

Agora, irei começar a desenvolver minha página "Artigos", a qual eu criei uma caixa específica pra ela no meu painel principal. Pra isso, precisarei criar um controle no Laravel, definir as rotas, criar as views para receber os HTML's desses artigos, e depois irei implementar apenas o HTML dessa página de Artigos, para que eu tenha um modelo do que irei implementar depois para colocar esse meu CRUD de artigos em funcionamento.

OBS: os comandos usados abaixo, estou extraindo do seguinte link:
https://laravel.com/docs/5.5/controllers#resource-controllers

Primeiramente, irei criar o controle do Laravel, farei isso utilizando o Resource Controllers, pois ele irá trazer os métodos prontos para implementar o CRUD, e também será uma maneira mais simples de definir as rotas. Começo isso digitando o seguinte comando dentro do meu diretório através do CMD:
> php artisan make:controller Admin/ArtigosController --resource

Com isso, meu controlador irá ficar salvo em /app/Http/Controllers/Admin/ArtigosController.php. Agora, irei configurar as rotas para acessar os métodos do meu controlador, o qual eu faço em /routes/web.php. Começo definindo meu grupo de rotas, o qual eu deixo marcado dentro do mesmo arquivo. Faço isso passando também um prefixo e um namespace para a minha rota.
// OBS: Todos os nomes de rotas de acordo com o Resource Controllers eu encontro no link: 
// https://laravel.com/docs/5.5/controllers#resource-controllers

Implemento a rota de Artigos dentro do meu novo grupo e em seguida coloco para retornar um "OK" no meu método index em /app/Http/Controllers/Admin/ArtigosController.php para testar minha rota. Se tudo der certo, digito http://localhost:8000/admin/artigos no meu navegador e ele me retornará um "Ok!". 

##########################################################################################
[CRIANDO A VIEW PARA A LISTA DE ARTIGOS]

Agora que a rota funciona, irei desenvolver o método Index no meu ArtigosController.php. Então irei criar a seguinte estrutura de diretórios:
/resources/views/admin/artigos
Após isso, crio o arquivo index.blade.php dentro dessa nova estrutura de diretórios, me baseando no home.blade.php. Em seguida, irei à minha /home e implemento um link na caixa de Artigos, o qual irá me redirecionar para a página de artigos através da minha caixa no menu principal, dentro do atributo url="".

Feito isso, atualizo meu navegador na página principal para testar meu link. Tudo funcionando corretamente, agora irei trabalhar na tabela de Artigos.

##########################################################################################
[TABELA DE LISTA DE ARTIGOS]

A primeira coisa que faço, é criar um link e um espaço para alocar minha tabela na página /resources/views/admin/artigos/index.blade.php. Em seguida, escolho qual tabela do Bootstrap usarei, no link:
https://getbootstrap.com/docs/3.3/css/#tables
Escolhida a tabela, aplico suas classes na minha nova tabela criada na página index.blade.php e crio uma tabela demo estática para realizar um preview de como irá ficar. Feito isso, vou em http://localhost:8000/admin/artigos para visualizar como minha tabela ficou. Tudo funcionando corretamente, partirei para trabalhar nos componentes em cima dessa tabela, para que ela fique mais dinâmica.

##########################################################################################
[COMPONENTE TABELALISTA - TÍTULOS]

Inicialmente, crio um novo componente em /resources/assets/js/components, o qual eu chamo de TabelaLista.vue, me baseando novamente em ExampleComponent.vue. Já aproveito e o habilito em app.js. Agora, recorto toda a minha tabela estática que estava em index.blade.php e a colo no meu TabelaLista.vue, e já coloco a minha tag <tabela-lista> na index.blade.php. Feito isso, vou em http://localhost:8000/admin/artigos e atualizo minha página, para visualizar se está funcionando corretamente. Tudo certo, volto à personalizar minha tabela na index, adicionando à minha tag a requisição de "v-bind:titulos", levando em consideração que irei torná-la dinâmica. Vou novamente à TabelaLista.vue e adiciono os props dinâmicos, para abrigar cada valor passado em "titulos", com um "v-for" na minha estrutura de cabeçalho da tabela, no meu HTML. 

##########################################################################################
[COMPONENTE TABELALISTA - ITENS]

Agora, irei criar um laço de repetição, para exibir, de forma dinâmica, cada item dentro da minha lista. Para testar a funçãqo que irei criar, crio a seguinte estrutura de requisições no meu index (literalmente irei copiar e colar pra facilitar minha vida):

@section('content')
    <pagina tamanho="12">
        <painel titulo="Lista de Artigos">
            <tabela-lista 
                v-bind:titulos="['#','Título', 'Descrição']"
                v-bind:itens="[[1,'PHP OO', 'Curso de PHP Orientado à Objetos'], [2,'Vue JS', 'Curso de Vue JS']]"
            ></tabela-lista>
        </painel>
    </pagina>
@endsection

Feito isso, adiciono ao meu props, dentro de TabelaLista.vue, para então dar início à criação da minha função. Além disso, adiciono o v-for="" ao <tr> e ao <td> do corpo da minha tabela, para criar uma lista de repetição. E então, vou à minha página de artigos e a atualizo para visualizar minhas alterações feitas. 

##########################################################################################
[COMPONENTE TABELALISTA - AÇÃO]

Primeiramente, vou ao index e, dentro da tag <tabela-lista>, defino os seguintes atributos:
criar="#criar" detalhe="#detalhe" editar="#editar" deletar="#deletar" token="7887522323"
(o token é um número aleatório)
Em seguida, adiciono minhas novas informações ao meu props em TabelaLista.vue e deixo meu link Criar da seguinte forma e o testo na página de Artigos:
<a v-if="criar" v-bind:href="criar">Criar</a>

Aplico a mesma lógica para os botões Detalhe, Editar e Deletar, e adiciono o condicionamento ao meu <td> que irá exibir esses 3 ícones, somente se for passado ao menos 1 desses 3, o que ficará da seguinte forma:
<td v-if="detalhe || editar || deletar">
    <a v-if="detalhe" v-bind:href="detalhe">Detalhe | </a>
    <a v-if="editar" v-bind:href="editar">Editar | </a>
    <a v-if="deletar" v-bind:href="deletar">Deletar</a>
</td>

E aí eu coloco um formulário dentro desse meu campo, o que estará melhor descrito em TabelaLista.vue. 

##########################################################################################
[COMPONENTE TABELALISTA - DELETAR]

Agora, irei trabalhar na submissão do meu formulário e no início do meu botão de Delete na minha página, adaptando minhas entradas e requisições e criando o método dentro do próprio script da TabelaLista.vue. 
EXPLICAÇÃO: 
Por que usar um método no script ao invés de usar uma função computada? 
R: Métodos no script só são processados quando há um clique do usuário, enquanto funções computadas são processadas toda vez no carregamento da página, o que as tornam mais pesadas, por isso podem ser mais interessantes.

##########################################################################################
[CRIANDO UM CAMPO DE BUSCA - PARTE 1]

para deixar minha barra de busca alinhada com o botão Criar, irei utilizar um código do Bootstrap, o qual eu insiro em TabelaLista.vue, antes da minha tabela, ambas juntas numa <div>. Em seguida, adapto a leitura de inserção dos dados na minha barra de busca com o atributo "data" dentro do meu script, o qual receberá uma função que irá retornar um objeto. Agora, irei adicionar métodos computados ao meu script, para que seja realizada a filtragem da busca na barra. Utilizarei método computado para ser efetuada sua ativação desde o carregamento da página, e pra minha aplicação não ficar pesada. 

##########################################################################################
[CRIANDO UM CAMPO DE BUSCA - PARTE 2]

Agora, dentro da minha função computada, eu crio o meu filtro para efetuar minha busca na lista de artigos, dentro da TabelaLista.vue. Todas explicações em comentários no próprio arquivo.

##########################################################################################
[LÓGICA PARA ORDENAR A LISTA DE ARTIGOS]

Irei criar métodos de ordenação da lista de artigos pelo título ou pelo ID. Começo isso, alterando direto dentro da minha lista:function(), ainda no meu arquivo TabelaLista.vue. Comentários e instruções à partir de lá.

##########################################################################################
[ORDENAÇÃO DINÂMICA]

Trabalharei agora em evoluir meus métodos de ordenação, dentro de TabelaLista.vue, em lista:function(), crio uma variável chamada ordem, e à partir de lá eu explico, através dos comentários. Feito a adaptação na função computada e nos meus props, vou ao index.blade.php e adiciono os atributos "ordem" e "ordemCol" à tag <tabela-lista>.

##########################################################################################
[MÉTODO PARA ORDENAR POR COLUNA - PARTE 1]

Desenvolverei um método para alterar a ordenação da tabela clicando na coluna pela qual quero ordenar. Faço isso dentro de methods em TabelaLista.vue, explico através de comentários no arquivo. Feito isso,ainda dentro de TabelaLista.vue, adiciono minhas alterações no titulo do HTML passando minha função em o v-on:click, deixando-o da seguinte forma:
<th style="cursor:pointer" v-on:click="ordenaColuna(index)" v-for="(titulo,index) in titulos">{{titulo}}</th>

E então a ordenação já é feita pelo click, podendo ser por Título, ID ou Descrição, porém o Vue indica no console do navegador que esta não é uma boa prática, pois altera o valor de atributo passado pela minha página index.blade.php, então vou alterar isso no próximo tópico.

##########################################################################################
[MÉTODO PARA ORDENAR POR COLUNA - PARTE 2]

Vou agora, corrigir o erro gerado no console pelo Vue por não executar boas práticas na ordenação da minha lista. Pra isso, vou criar duas variáveis dentro de "data" no script que irão substituir os props "ordem" e "ordemcol". E então eu altero no meu método "ordenaColuna" e na minha função computada "lista", tudo que recebe "this.ordem" para "this.ordemAux" e tudo que recebe "this.ordemCol" para "this.ordemAuxCol". e Então, minha ordenação dinâmica já está funcionando corretamente.

##########################################################################################
[CRIANDO COMPONENTES PARA NAVEGAÇÃO]

Agora irei criar um componente de navegação para indicar ao usuário em qual parte do sistema ele está navegando, o qual também terá botões, para facilitar caso ele queira retornar para algum outro diretório pelo qual ele já tenha passado. Farei isso com o recurso Breadcrumbs do Bootstrap, no seguinte link:
https://getbootstrap.com/docs/3.3/components/#breadcrumbs

Copio o template no link, crio um componente chamado Migalhas.vue (baseado no meu ExampleComponent.vue) e o colo dentro das tags <template> e habilito meu componente em app.js como "migalhas" e adiciono minha tag <migalhas> no meu index.blade.php, dentro do meu painel e vou ao meu navegador para conferir se meu componente de navegação já está sendo exibido.

Funcionando corretamente, irei aplicar a lógica de funcionamento da mesma. Pra isso, irei realizar testes do controle do Laravel, em ArtigosController.php, no método index(), à partir de lá, irei explicar através de comentários no arquivo. Criada a variável $listaMigalhas com o json_encode, eu passo o v-bind:lista="{{$listaMigalhas}}" dentro da minha tag <migalhas>, no index.blade.php. Enfim, tenho acesso à esses dados no meu componente Migalhas.vue, e trato deles pelo meu props, e explico à partir de lá pelos comentários o que eu faço.
E então, vou ao meu navegador e atualizo a minha página, para ter certeza de que não está sendo gerado nenhum erro, e abro o console. Se ocorrer tudo certo, precisa aparecer um array com os dados passados.

##########################################################################################
[FINALIZANDO O COMPONENTE DE MIGALHAS]

Com o meu array de dados sendo recebido no meu console, sigo com minha implementação dos Breadcrumbs. Começo criando um método computado no Migalhas.vue com a função defineClass() dentro dele, comentando o meu antigo Mounted, que retornava o array para o console, aplicando um v-for no <li> do Home, e alterando o link Home utilizando um v-bind na class e no href e usando uma variável dinâmica para estruturar o caminho.

##########################################################################################
[COMPONENTE DE MODAL]

Para criar todo o meu CRUD e criar telas para Criar novo Registro, Editar, Exibir Detalhes e Deletar um registro irei utilizar o componente Large Modal do Bootstrap 3.3, o qual irá exibir uma janela com um formulário de todas as minhas opções, o qual eu obtenho em: 
https://getbootstrap.com/docs/3.3/javascript/#modals-sizes

Para implementá-lo, criarei dois componentes: um para o Botão e outro para o Formulário. 
OBS: Este componente utiliza o JQuery para seu funcionamento. Como já tenho o Bootstrap instalado e o JQuery instanciado na minha aplicação, não preciso me preocupar em realizar alterações, precisando colocar só os códigos do modal nos meus componentes. Portanto, irei criar um diretório chamado "modal" e dentro dele irei criar os meus componentes Modal.vue para conteúdos e ModalLink.vue para meus botões e então já irei registrá-los no meu app.js. Sequencialmente irei implementar meu Modal.vue, e a partir de lá explico meus passos por comentários.

Feitas as minhas alterações dentro desse arquivo, preciso testar. Para isso, irei em resources/views/admin/artigos/index.blade.php e insiro minha tag <modal> no fim do código, antes do @endsection, passando o atributo "nome" dentro dela e aplicando o meu botão copiado do link embaixo das minhas migalhas e aplicando o nome que usei dentro do data-target, com uma hashtag antes do nome. Concluído esse passo, vou ao meu navegador, na página de artigos e é para o meu botão aparecer na minha tabela.

O botão funcionando, mesmo sem conteúdo, preciso adicionar um conteúdo ao meu modal agora. Pra isso, vou no seguinte link para pegar um formulário pra testar meu modal lá:
https://getbootstrap.com/docs/3.3/css/#forms

Pego o formulário, vou em index.blade.php e insiro-o dentro da minha tag <modal>, dentro também de uma tag <painel>, pra ficar corretamente centralizado.
Volto ao navegador e testo. Tudo funcionando, irei pro próximo passo.

##########################################################################################
[COMPONENTE MODAL LINK]

Agora, irei remover o meu botão que adicionei recentemente ao meu index (aliás, irei comentá-lo) e colocarei-o em ModalLink.vue, dentro de uma <div> com a classe em branco, a qual eu poderei setar dinamicamente também mais pra frente através de um props. Comentários à partir de lá.

Dentro desse arquivo eu coloco 3 opções de link/botão: a padrão, que renderiza o botão padrão. A 'button', que renderiza um botão específico. E a 'link', que renderiza um link estilizado específico. As classes de estilização também são dinâmicas, porém são opcionais.

Concluído meu trabalho no ModalLink.vue, vou ao meu index e insiro minha tag <modallink> lá, no mesmo lugar que eu havia deixado meu antigo botão. Passo dentro dessa tag também os props: 'nome' e 'título'. Quanto aos props 'tipo' e 'css' eu irei diversificar pra exibir o máximo de opções possíveis lá, deixando em comentário as que não irei usar.
Depois disso, vou alternando entre os botôes que criei lá, pra me certificar que estão todos funcionando, testando-os pelo navegador. Depois disso, vou ao meu próximo passo, que é implementar o componente formulário.

##########################################################################################
[COMPONENTE FORMULÁRIO]

Pra implementar meu CRUD, irei criar dois formulários: Um de Criar um Registro, o qual será alocado no botão Criar, e um formulário de Edição de Registro já existente, o qual será alocado no botão Editar. 

Começo criando o meu componente Formulario.vue dentro da minha pasta padrão de componentes, com a minha estrutura das tags <template> e <script>, já o habilito em app.js e crio uma tag <form> dentro dele. Comentários e estrutura à partir de lá.

Tudo concluído, parto para meu index.blade.php e comento todo aquele meu formulário de teste que estava usando antes, e sobreponho com a tag <formulario>, passando também todos os meus atributos que eu estabeleci no props e crio um simples formulário de registro lá dentro, seguido de um simples botão Bootstrap pra efetuar meu submit.

##########################################################################################
[REFATORANDO A TABELA LISTA]

Começo indo ao meu ArtigosController.php, dentro do método index(), criando a variável $listaArtigos, me baseando na $listaMigalhas, passando todos os meus artigos que eu havia adicionado dentro da minha página index.blade.php. Depois disso, vou ao meu index e subtituo a antiga forma como eu estava passando os meus artigos por uma nova, inserindo minha variável $listaArtigos.

Depois disso, vou ao meu componente TabelaLista.vue e me dirijo à sessão à qual marquei como [ADAPTAÇÃO: FILTRAGEM], inserindo toda a minha [ANTIGA FUNÇÃO DE FILTRAGEM] ao if(this.buscar). Feito isso, minha lista de artigos já será exibida completamente, porém ela não executa mais a ordanação, portanto irei trabalhar nisso.

Pra retomar a minha ordenação, vou à minha tag [ORDENAÇÃO], marco como comentário a minha antiga função, seguida de [MÉTODO ANTIGO] e aplico meu [MÉTODO ADAPTADO], baseado no meu método antigo, porém com a função Object.values() sendo aplicada.

Feito isso, vou ao meu navegador para realizar os testes da ordenação. Tudo funcionando corretamente, vou ao meu próximo passo.

##########################################################################################
[OPÇÃO DE MODAL DENTRO DO TABELA LISTA]

Irei deixar disponível duas formas de criar um novo registro: através de um link e através de um modal, tornando assim o modal algo opcional, pra isso, irei criar uma flag dentro da minha tabela. Começo indo pro meu index.blade.php e insiro, dentro da minha <tabela-lista>, o atributo 'modal="sim" ' e passo o props 'modal' dentro da minha TabelaLista.vue e, em seguida, deixo meu link da seguinte forma:

<a v-if="criar && !modal" v-bind:href="criar">Criar</a>

E então eu tiro o <modallink> do meu index e o adiciono à minha TabelaLista.vue, com a mesma verificação do v-if do meu link, só que com a confirmação do meu modal na condição, ficando da seguinte forma:

<modallink v-if="criar && modal" tipo="link" nome="meuModalTeste" titulo="Criar" css=""></modallink>

Substituo então a minha tag <div> por uma <span> no meu ModalLink.vue, pra não ficar um espaço tão grande entre meu botão/link e minha tabela.
No meu index, como atributo da tag <modal> eu insiro o atributo ' nome="adicionar" ' e passo esse mesmo nome no meu <modallink> dentro de TabelaLista.vue, pois agora irei criar meu modal de Editar e o meu modal de Detalhes também, no meu index.blade.php, dando Ctrl+C e Ctrl+V no meu modal Adicionar e alterando somente os nomes e títulos por enquanto. 

Vou ao meu TabelaLista.vue e copio meu <modallink> de Criar e colo e adapto embaixo do link Editar, repito esse processo para todos os meus botões Editar. 

##########################################################################################
[CONFIGURANDO O VUEX]

Para resolver o problema de preencher automaticamente meu formulário de edição com as informações já utilizadas no registro utilizarei o VueX, que é uma biblioteca que irei instalar na minha aplicação. Ele me servirá para facilitar a troca de informações dos meus componentes. 

Pra realizar a instalação do VueX eu abro meu arquivo app.js e abro a pasta C:\xampp\htdocs\laravel\Laravel 5.5 com Vue JS\blog, lá dentro, eu digito o seguinte comando:
> npm i vuex --save-dev

Pra conferir se foi efetuada a instalação, eu vou em package.json e lá deve indicar a instalação do "vuex". Concluído isso, irei efetuar a configuração do VueX, começando por ir em app.js e importá-lo, e depois indiar ao Vue que use o VueX. Feito isso, ainda nesse arquivo, crio a loja do VueX. Comentários com as explicações no arquivo, na sessão [CONFIGURANDO O VUEX]. 

Feito todos os passos lá, agora preciso passar minhas informações pra dentro do meu sistema, faço isso na seguinte parte, no final do código:

const app = new Vue({
    el: '#app',
    /* passando minha loja para o resto do sistema */
    store
});

insiro o seguinte valor dentro do objeto teste:"Funcionou!" pra fazer o teste da execução. Agora, vou em TabelaLista.vue e, dentro da minha <div> eu coloco a seguinte tag:
<p>{{this.$store.state.itens}}</p>

aí então eu vou na minha página com a tabela de artigos pelo meu navegador e confiro se aparece lá o meu objeto. Efetuado meu primeiro teste com o valor solto acima da tabela, ainda dentro da TabelaLista.vue, eu vou na minha função computada em lista:function() e insiro lá a mesma variável que utilizei pra efetuar os meus testes. Comentários à partir de lá.

Concluído, abro meu navegador e atualizo minha página, pra me certificar de que foi inserido e renderizado meu novo objeto. 

##########################################################################################
[PREENCHENDO O FORMULÁRIO DE EDITAR]

Agora que eu já testei o funcionamento da minha loja, irei colocá-lo em prática. Irei comentar os itens marcados como [TESTE] na minha TabelaLista.vue para dar procedência ao meu projeto.
Eu já tenho a minha "loja de itens" com os registros que tenho na minha tabela, agora, o que eu preciso é passar todos eles para o meu Modal, que é o que eu recebo na TabelaLista.vue, em: 

<tr v-for="(item,index) in lista">
<td v-for="i in item">{{i}}</td>

Eu posso resolver isso na tag <modallink>, passando o atributo v-bind:item="item" dentro dele e passando esse props pra ele dentro do meu componente ModalLink.vue. Crio também um <span> que irá ser coordenado por um método que irei criar, dentro desse arquivo, o qual irá efetuar o preenchimento do meu modal, ou então exibirá os campos em branco, caso não haja nada dentro do atributo "item". Agora, efetuo a criação do meu método preencheFormulario() e o deixo vazio por enquanto. Aí vou ao app.js e comento meu antigo objeto "itens" como um teste e crio um novo em branco, onde irei trabalhar permanentemente. Agora, passo o meu objeto de app.js pra dentro da minha função preencheFormulario(), em ModalLink.vue, utilizando o commit. Transmito então essas informações para o meu formulário de edição, dentro do meu index.blade.php, no meu Modal EDITAR, nas tags <input>, utilizando o v-model, o que vai ficar da seguinte forma (vou colocar só os atributos, não as tags completas):

#título
v-model="$store.state.item.titulo"
#descrição
v-model="$store.state.item.descricao"
                                /\
                                ||
OBS: os nomes que passo como último parâmetro aqui eu defino lá no meu ArtigosController.php, que é o meu controlador de artigos

##########################################################################################
[EXIBINDO O MODAL DE DETALHE]

Agora irei utilizar a mesma lógica do preenchimento do Editar, na sessão anterior. Primeiramente irei fazer o botão "detalhe" abrir um modal, o qual irei criar no index.blade.php. 